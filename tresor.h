#ifndef __TRESOR_H__
#define __TRESOR_H__

#include <stdio.h>
#include <stdlib.h>

#define SCALE 10

#include "mods.h"
#include "objs.h"

static int MAP[25][26] = {
    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},

    {4, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4},

    {4, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 4},

    {4, 6, 6, 6, 2, 2, 6, 6, 6, 6, 2, 1, 1, 1, 1, 2, 2, 3, 3, 3, 6, 0, 6, 6, 6, 4},

    {4, 6, 6, 6, 2, 2, 6, 6, 2, 2, 2, 1, 2, 2, 1, 2, 6, 6, 6, 3, 3, 3, 3, 6, 6, 4},

    {4, 6, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 4},

    {4, 6, 6, 6, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 6, 6, 3, 6, 4},

    {4, 6, 3, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 3, 4, 4},

    {4, 6, 3, 2, 2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2, 2, 6, 3, 4, 4},

    {4, 4, 3, 2, 2, 2, 1, 1, 1, 3, 4, 4, 4, 4, 4, 4, 3, 1, 1, 1, 2, 2, 6, 3, 4, 4},

    {4, 4, 3, 1, 1, 1, 1, 1, 3, 4, 4, 4, 4, 1, 1, 4, 4, 3, 1, 1, 1, 2, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 1, 1, 3, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 3, 1, 1, 1, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 1, 3, 4, 4, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 3, 1, 1, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 1, 3, 4, 4, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 3, 1, 1, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 2, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1, 2, 4, 4, 1, 1, 2, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 2, 1, 1, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 1, 1, 2, 2, 1, 3, 4, 4},

    {4, 4, 3, 3, 1, 2, 1, 1, 6, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 2, 2, 1, 3, 4, 4},

    {4, 4, 4, 3, 1, 1, 1, 6, 6, 6, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 2, 1, 3, 4, 4},

    {4, 4, 4, 3, 1, 1, 2, 2, 2, 6, 6, 4, 1, 4, 4, 6, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4},

    {4, 4, 4, 3, 6, 6, 6, 1, 1, 6, 6, 5, 5, 5, 5, 6, 1, 1, 1, 1, 1, 3, 1, 3, 4, 4},

    {4, 4, 4, 3, 2, 2, 6, 2, 2, 6, 6, 4, 1, 4, 4, 6, 6, 1, 1, 1, 1, 3, 5, 3, 4, 4},

    {4, 4, 4, 6, 6, 6, 6, 6, 2, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 3, 3, 6, 6, 4, 4},

    {4, 4, 4, 6, 6, 6, 6, 6, 2, 6, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 3, 6, 6, 6, 4, 4},

    {4, 4, 4, 4, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},

    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}
};

static int MAPT[25][26] = {
    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},

    {4, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4},

    {4, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 4},

    {4, 6, 6, 6, 2, 2, 6, 6, 6, 6, 2, 1, 1, 1, 1, 2, 2, 3, 3, 3, 6, 6, 6, 6, 6, 4},

    {4, 6, 6, 6, 6, 2, 6, 6, 2, 2, 2, 1, 2, 2, 1, 2, 6, 6, 6, 3, 3, 3, 3, 6, 6, 4},

    {4, 6, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 4},

    {4, 6, 6, 6, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 6, 6, 3, 6, 4},

    {4, 6, 3, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 3, 4, 4},

    {4, 6, 3, 2, 2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2, 2, 6, 3, 4, 4},

    {4, 4, 3, 2, 2, 2, 1, 1, 1, 3, 4, 4, 4, 4, 4, 4, 3, 1, 1, 1, 2, 2, 6, 3, 4, 4},

    {4, 4, 3, 1, 1, 1, 1, 1, 3, 4, 4, 4, 4, 1, 1, 4, 4, 3, 1, 1, 1, 2, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 1, 1, 3, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 3, 1, 1, 1, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 1, 3, 4, 4, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 3, 1, 1, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 1, 3, 4, 4, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 3, 1, 1, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 2, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1, 2, 4, 4, 1, 1, 2, 1, 3, 4, 4},

    {4, 4, 3, 1, 1, 2, 1, 1, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 1, 1, 2, 2, 1, 3, 4, 4},

    {4, 4, 3, 3, 1, 2, 1, 1, 6, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 2, 2, 1, 3, 4, 4},

    {4, 4, 4, 3, 1, 1, 1, 6, 6, 6, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 2, 1, 3, 4, 4},

    {4, 4, 4, 3, 1, 1, 2, 2, 2, 6, 6, 4, 1, 4, 4, 6, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4},

    {4, 4, 4, 3, 6, 6, 6, 1, 1, 6, 6, 5, 5, 5, 5, 6, 1, 1, 1, 1, 1, 3, 1, 3, 4, 4},

    {4, 4, 4, 3, 2, 2, 6, 2, 2, 6, 6, 4, 1, 4, 4, 6, 6, 1, 1, 1, 1, 3, 5, 3, 4, 4},

    {4, 4, 4, 6, 6, 6, 6, 6, 2, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 3, 3, 6, 6, 4, 4},

    {4, 4, 4, 6, 6, 6, 6, 6, 2, 6, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 3, 6, 6, 6, 4, 4},

    {4, 4, 4, 4, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},

    {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}
};

// 5 treasures & probably 40 lines max & 2 Dimensions

static int Mvs[12][100][2] = {
    /* T0 */
    {
        { -1, 0 }, { 0, -1 }, { 0, -1 },{ 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 },{ 0, -1 }, { 0, -1 },{ 0, -1 }, { 0, -1 },{ 0, -1 }, { 0, -1 },{ 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 1, 0  }, { 0, -1 }, { 0, -1 }, { -1, 0 }, { -1, 0}
    },
    {
        { -1, 0 }, { 0, -1 }, { 0, -1 },{ 0, -1 }, { 0, -1 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { 0, 1 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { 0, 1 }, { 0, 1 }, { 0, 1 }, { -1, 0 }, { -1, 0 }
    },
    {
        { -1, 0 }, { 0, -1 }, { 0, -1 },{ 0, -1 }, { 0, -1 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { -1, 0 }, { 0, 1 }, { 0, 1 }, { -1, 0 }, { -1, 0 }, { 0, 1 }, { 0, 1 }, { -1, 0 }, { -1, 0 }, { 0, 1 }, { 0, 1 }, { 0, 1 }, { 1, 0 }, { 1, 0 }, { 1, 0 }, { 0, 1 }, { 1, 0 }
    },
    {
        { -1, 0 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 }, { 0, -1 },{ -1 , 0 }, { -1 , 0 }, { -1 , 0 }, { -1 , 0 }, { -1 , 0 }, { -1 , 0 }, { -1 , 0 }, { -1 , 0 }, { 0, -1 }, { 0, -1 }, { -1 , 0 }
    }
};

void initMvs (int Mvs[12][100][2]);
int findl (Nodes * nodes, Node nd);
int dist (Node a, Node b);
void displayMoves (Moves * mvs);
int matValidation (int val);
int findLastIndex (int Mvs[12][100][2], int i);
int comp2nodes (Node * a, Node * b);
int finCl (Nodes * nodes, Node nd);
void FillMovesFromStart (Moves *** lmvs, int Mvs[12][100][2]);
Nodes * addqueu_n (Nodes * nodes, Node node);
Moves * addqueue (Moves * mvs, Move mv);
void sortList(Nodes * path, Nodes ** sorted);
void draw_map (Map * map);
int draw_path (Map * map, Perso p, int x, int y, Graph * g, Moves ** mvs);
void draw_paths (Map * map, Perso p, int Mvs[12][100][2]);
Moves * initMap (Map * map, Perso * perso);
int movePerso (Map * map, Perso * perso, int y, int x);
void freeMap (Map * map);
void displayMovesTab(int Mvs[12][100][2]);
void refresh_map (Map * map, Moves * tresors);
void draw_path_solution (Map * map, Nodes * path);

#endif